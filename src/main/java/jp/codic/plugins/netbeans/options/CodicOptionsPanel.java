/*
 * The MIT License
 *
 * Copyright 2016 junichi11.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package jp.codic.plugins.netbeans.options;

import jp.codic.plugins.netbeans.client.Project;
import jp.codic.plugins.netbeans.ui.ConfigVO;

final class CodicOptionsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 5640703571260055170L;

    private final CodicOptionsPanelController controller;

    CodicOptionsPanel(CodicOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codicConfigPanel = new jp.codic.plugins.netbeans.ui.CodicConfigPanel();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(codicConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(codicConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        CodicOptions options = CodicOptions.getInstance();
        if (!codicConfigPanel.isVerified()) {
            ConfigVO config = new ConfigVO(options.getAccessToken(), options.getProjectId(), options.getCasing());
            codicConfigPanel.setConfg(config);
        }
    }

    void store() {
        CodicOptions options = CodicOptions.getInstance();
        if (codicConfigPanel.isVerified()) {
            options.setAccessToken(codicConfigPanel.getAccessToken());
            Project selectedProject = codicConfigPanel.getSelectedProject();
            if (selectedProject != null) {
                options.setProjectId(selectedProject.getId());
            }
            options.setCasing(codicConfigPanel.getSelectedCasing());
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.codic.plugins.netbeans.ui.CodicConfigPanel codicConfigPanel;
    // End of variables declaration//GEN-END:variables
}
