/*
 * The MIT License
 *
 * Copyright 2016 junichi11.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package jp.codic.plugins.netbeans.ui.customizer;

import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import jp.codic.plugins.netbeans.client.Project;
import jp.codic.plugins.netbeans.client.params.GetTranslationsParams.Casing;
import jp.codic.plugins.netbeans.ui.ConfigVO;
import jp.codic.plugins.netbeans.utils.UiUtils;
import org.openide.util.NbBundle;

/**
 *
 * @author junichi11
 */
public class CodicCustomizerPanel extends JPanel {

    private static final long serialVersionUID = -7217560881939456757L;
    private final ConfigVO config;

    /**
     * Creates new form CodicCustomizerPanel
     */
    public CodicCustomizerPanel(ConfigVO config) {
        this.config = config;
        initComponents();
        init();
    }

    private void init() {
        codicConfigPanel.setConfg(config);
    }

    public boolean useGlobalOptions() {
        return useGlobalOptionsCheckBox.isSelected();
    }

    public void setUseGlobalOptions(boolean use) {
        if (useGlobalOptionsCheckBox.isSelected() == use) {
            return;
        }
        useGlobalOptionsCheckBox.setSelected(use);
    }

    public String getAccessToken() {
        return codicConfigPanel.getAccessToken();
    }

    public Project getProject() {
        return codicConfigPanel.getSelectedProject();
    }

    public Casing getCasing() {
        return codicConfigPanel.getSelectedCasing();
    }

    public boolean isVerified() {
        return codicConfigPanel.isVerified();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codicConfigPanel = new jp.codic.plugins.netbeans.ui.CodicConfigPanel();
        useGlobalOptionsCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(useGlobalOptionsCheckBox, org.openide.util.NbBundle.getMessage(CodicCustomizerPanel.class, "CodicCustomizerPanel.useGlobalOptionsCheckBox.text")); // NOI18N
        useGlobalOptionsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                useGlobalOptionsCheckBoxItemStateChanged(evt);
            }
        });
        useGlobalOptionsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useGlobalOptionsCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(useGlobalOptionsCheckBox)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(codicConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(useGlobalOptionsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codicConfigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void useGlobalOptionsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_useGlobalOptionsCheckBoxItemStateChanged
        UiUtils.setAllComponentsEnabled(codicConfigPanel, !useGlobalOptions());
    }//GEN-LAST:event_useGlobalOptionsCheckBoxItemStateChanged

    @NbBundle.Messages("CodicCustomizerPanel.use.global.warning=Access Token and Project are initialized on save")
    private void useGlobalOptionsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useGlobalOptionsCheckBoxActionPerformed
        if (useGlobalOptions()) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    UiUtils.showWarningDialog(Bundle.CodicCustomizerPanel_use_global_warning());
                }
            });
        }
    }//GEN-LAST:event_useGlobalOptionsCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.codic.plugins.netbeans.ui.CodicConfigPanel codicConfigPanel;
    private javax.swing.JCheckBox useGlobalOptionsCheckBox;
    // End of variables declaration//GEN-END:variables
}
